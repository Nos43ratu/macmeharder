schema {
    query: Query
    mutation: Mutation
}

type AppCategoryNode {
    id: ID!
    name: String!
    appsList: [AppsNode!]!
}

type AppsNode {
    id: ID!
    created: DateTime!
    title: String!
    language: String
    languageCount: Int
    description: String
    size: Float
    award: String
    place: Int
    age: Int
    category: AppCategoryNode!
    developer: String
    chart: String
    version: String
    compatibility: String
    appImages: [ImagesNode!]!
}

scalar DateTime

type ImagesNode {
    id: ID!
    mainImage: String!
    isAvatar: Boolean!
    app: AppsNode!
    url: String
}

type Mutation {
    addApp(title: String!, language: String, size: String, award: String, place: String, age: String, category: String!): AppsNode
    removeApp(appId: ID): Boolean
}

type PostImageNode {
    id: ID!
    image: String!
    isAvatar: Boolean!
    post: PostNode!
}

type PostNode {
    id: ID!
    created: DateTime!
    title: String!
    miniTitle: String
    body: String
    postImages: [PostImageNode!]!
}

type Query {
    appsList(page: Int, count: Int): [AppsNode]
    appCategories: [AppCategoryNode]
    appImages: [ImagesNode]
    app(appId: ID): AppsNode
    post(postId: ID): PostNode
    postList: [PostNode]
}